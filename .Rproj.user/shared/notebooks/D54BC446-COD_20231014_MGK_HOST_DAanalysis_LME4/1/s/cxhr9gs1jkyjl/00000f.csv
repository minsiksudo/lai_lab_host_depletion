"0","#Maaslin2 normalization"
"0",""
"0","  #microbiome normalization - count"
"0","        clr_spt_transformed_otu <- otu_table(physeq0_clr_spt) %>% t %>% data.frame()"
"0","        #microbiome normalization - relative abundance"
"0","        clr_spt_transformed_otu_rel <- physeq0_clr_all_rel %>% otu_table %>% t %>% data.frame()"
"0","        "
"0","        #both normalization - for read counts and relative abundances with microbiome package - showed the same output."
"0","        #Maaslin showed slightly different data."
"0",""
"0",""
"0","# Masslin normalization for LMER ------------------------------------------"
"0",""
"0","        "
"0",""
"0","# LMER on maaslin transformed data"
"0","        lmer_maaslin_bal <- data.frame()"
"0","        "
"0","        for(i in 1:54) {"
"0","                #Creating a data frame that includes CLR transformed data of i-th bug."
"0","                "
"0","                #making differnt otu tables for each sample type"
"0","                otu_table_bal <- maaslin_bal_transformed_otu %>% column_to_rownames(""feature"")"
"0","                "
"0","                #tax table for different sample type"
"0","                taxa_data_bal <- otu_table_bal[i] %>% data.frame()"
"0","                "
"0","                #Making a merged dataframe having sample data and CLR transformed output"
"0","                lme_data_bal <- merge(taxa_data_bal, sample_data(physeq0_clr_bal), by = 0) %>% column_to_rownames(""Row.names"")"
"0","                "
"0","                #generating a character of formula."
"0","                #Here, as the taxa are already CLR transformed, I did not make model at log-scale."
"0","                lme4_formula <- paste(names(taxa_data_bal), ""~"", ""lypma + benzonase + host_zero + molysis + qiaamp + (1|subject_id)"")"
"0","                "
"0","                #BAL stratified analysis"
"0","                BAL_result <- lme4::lmer(formula = lme4_formula,"
"0","                                         data = lme_data_bal) %>% "
"0","                        lmerTest::as_lmerModLmerTest() %>% # p-value calculated by lmerTest"
"0","                        summary %>%"
"0","                        .$coefficients %>%"
"0","                        data.frame(check.names = F) %>% "
"0","                        mutate(taxa = names(taxa_data_bal),"
"0","                               sample_type = ""BAL"") %>% "
"0","                        rownames_to_column(""metadata"")  %>%"
"0","                        subset(., .$metadata %in% c(""lypma"", ""benzonase"", ""host_zero"", ""molysis"", ""qiaamp""))"
"0","                "
"0","                "
"0","                #row binding all the associations of i-th taxa to one data frame"
"0","                lmer_maaslin_bal <- rbind(lmer_maaslin_bal,"
"0","                                   BAL_result %>% remove_rownames()"
"0","                )"
"0","                "
"0","        }"
"0","        "
"0","        lmer_maaslin_ns <- data.frame()"
"0","        "
"0","        for(i in 1:29) {"
"0","                #Creating a data frame that includes CLR transformed data of i-th bug."
"0","                "
"0","                #making differnt otu tables for each sample type"
"0","                otu_table_ns <- maaslin_ns_transformed_otu %>% column_to_rownames(""feature"")"
"0","                "
"0","                #tax table for different sample type"
"0","                taxa_data_ns <- otu_table_ns[i] %>% data.frame()"
"0","                "
"0","                #Making a merged dataframe having sample data and CLR transformed output"
"0","                lme_data_ns <- merge(taxa_data_ns, sample_data(physeq0_clr_ns), by = 0) %>% column_to_rownames(""Row.names"")"
"0","                "
"0","                #generating a character of formula."
"0","                #Here, as the taxa are already CLR transformed, I did not make model at log-scale."
"0","                lme4_formula <- paste(names(taxa_data_ns), ""~"", ""lypma + benzonase + host_zero + molysis + qiaamp + (1|subject_id)"")"
"0","                "
"0","                #BAL stratified analysis"
"0","                NS_result <- lme4::lmer(formula = lme4_formula,"
"0","                                         data = lme_data_ns) %>% "
"0","                        lmerTest::as_lmerModLmerTest() %>% # p-value calculated by lmerTest"
"0","                        summary %>%"
"0","                        .$coefficients %>%"
"0","                        data.frame(check.names = F) %>% "
"0","                        mutate(taxa = names(taxa_data_ns),"
"0","                               sample_type = ""Nasal"") %>% "
"0","                        rownames_to_column(""metadata"")  %>%"
"0","                        subset(., .$metadata %in% c(""lypma"", ""benzonase"", ""host_zero"", ""molysis"", ""qiaamp""))"
"0","                "
"0","                "
"0","                #row binding all the associations of i-th taxa to one data frame"
"0","                lmer_maaslin_ns <- rbind(lmer_maaslin_ns,"
"0","                                          NS_result %>% remove_rownames()"
"0","                )"
"0","                "
"0","        }"
"0","        "
"0","        lmer_maaslin_ns"
